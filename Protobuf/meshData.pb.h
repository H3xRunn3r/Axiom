// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: meshData.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "vboData.pb.h"
#include "textureData.pb.h"
#include "boundingSphereData.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_meshData_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_meshData_2eproto {
  static const ::uint32_t offsets[];
};
class meshData_proto;
struct meshData_protoDefaultTypeInternal;
extern meshData_protoDefaultTypeInternal _meshData_proto_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum meshData_proto_RENDER_MODE : int {
  meshData_proto_RENDER_MODE_MODE_POINTS = 0,
  meshData_proto_RENDER_MODE_MODE_LINE = 1,
  meshData_proto_RENDER_MODE_MODE_LINE_LOOP = 2,
  meshData_proto_RENDER_MODE_MODE_LINE_STRIP = 3,
  meshData_proto_RENDER_MODE_MODE_TRIANGLES = 4,
  meshData_proto_RENDER_MODE_MODE_TRIANGLE_STRIP = 5,
  meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN = 6,
  meshData_proto_RENDER_MODE_meshData_proto_RENDER_MODE_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  meshData_proto_RENDER_MODE_meshData_proto_RENDER_MODE_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool meshData_proto_RENDER_MODE_IsValid(int value);
extern const uint32_t meshData_proto_RENDER_MODE_internal_data_[];
constexpr meshData_proto_RENDER_MODE meshData_proto_RENDER_MODE_RENDER_MODE_MIN = static_cast<meshData_proto_RENDER_MODE>(0);
constexpr meshData_proto_RENDER_MODE meshData_proto_RENDER_MODE_RENDER_MODE_MAX = static_cast<meshData_proto_RENDER_MODE>(6);
constexpr int meshData_proto_RENDER_MODE_RENDER_MODE_ARRAYSIZE = 6 + 1;
const std::string& meshData_proto_RENDER_MODE_Name(meshData_proto_RENDER_MODE value);
template <typename T>
const std::string& meshData_proto_RENDER_MODE_Name(T value) {
  static_assert(std::is_same<T, meshData_proto_RENDER_MODE>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RENDER_MODE_Name().");
  return meshData_proto_RENDER_MODE_Name(static_cast<meshData_proto_RENDER_MODE>(value));
}
bool meshData_proto_RENDER_MODE_Parse(absl::string_view name, meshData_proto_RENDER_MODE* value);

// ===================================================================


// -------------------------------------------------------------------

class meshData_proto final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:meshData_proto) */ {
 public:
  inline meshData_proto() : meshData_proto(nullptr) {}
  ~meshData_proto() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR meshData_proto(
      ::google::protobuf::internal::ConstantInitialized);

  inline meshData_proto(const meshData_proto& from) : meshData_proto(nullptr, from) {}
  inline meshData_proto(meshData_proto&& from) noexcept
      : meshData_proto(nullptr, std::move(from)) {}
  inline meshData_proto& operator=(const meshData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline meshData_proto& operator=(meshData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const meshData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const meshData_proto* internal_default_instance() {
    return reinterpret_cast<const meshData_proto*>(
        &_meshData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(meshData_proto& a, meshData_proto& b) { a.Swap(&b); }
  inline void Swap(meshData_proto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(meshData_proto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  meshData_proto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<meshData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const meshData_proto& from);
  void MergeFrom(const meshData_proto& from);
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(meshData_proto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "meshData_proto"; }

 protected:
  explicit meshData_proto(::google::protobuf::Arena* arena);
  meshData_proto(::google::protobuf::Arena* arena, const meshData_proto& from);
  meshData_proto(::google::protobuf::Arena* arena, meshData_proto&& from) noexcept
      : meshData_proto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

 public:
  // nested types ----------------------------------------------------
  using RENDER_MODE = meshData_proto_RENDER_MODE;
  static constexpr RENDER_MODE MODE_POINTS = meshData_proto_RENDER_MODE_MODE_POINTS;
  static constexpr RENDER_MODE MODE_LINE = meshData_proto_RENDER_MODE_MODE_LINE;
  static constexpr RENDER_MODE MODE_LINE_LOOP = meshData_proto_RENDER_MODE_MODE_LINE_LOOP;
  static constexpr RENDER_MODE MODE_LINE_STRIP = meshData_proto_RENDER_MODE_MODE_LINE_STRIP;
  static constexpr RENDER_MODE MODE_TRIANGLES = meshData_proto_RENDER_MODE_MODE_TRIANGLES;
  static constexpr RENDER_MODE MODE_TRIANGLE_STRIP = meshData_proto_RENDER_MODE_MODE_TRIANGLE_STRIP;
  static constexpr RENDER_MODE MODE_TRIANGLE_FAN = meshData_proto_RENDER_MODE_MODE_TRIANGLE_FAN;
  static inline bool RENDER_MODE_IsValid(int value) {
    return meshData_proto_RENDER_MODE_IsValid(value);
  }
  static constexpr RENDER_MODE RENDER_MODE_MIN = meshData_proto_RENDER_MODE_RENDER_MODE_MIN;
  static constexpr RENDER_MODE RENDER_MODE_MAX = meshData_proto_RENDER_MODE_RENDER_MODE_MAX;
  static constexpr int RENDER_MODE_ARRAYSIZE = meshData_proto_RENDER_MODE_RENDER_MODE_ARRAYSIZE;
  template <typename T>
  static inline const std::string& RENDER_MODE_Name(T value) {
    return meshData_proto_RENDER_MODE_Name(value);
  }
  static inline bool RENDER_MODE_Parse(absl::string_view name, RENDER_MODE* value) {
    return meshData_proto_RENDER_MODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kRotationFieldNumber = 13,
    kTranslationFieldNumber = 14,
    kScaleFieldNumber = 15,
    kPVersionFieldNumber = 1,
    kPMeshNameFieldNumber = 2,
    kVboVertFieldNumber = 6,
    kVboNormFieldNumber = 7,
    kVboUvFieldNumber = 8,
    kVboIndexFieldNumber = 9,
    kVboColorFieldNumber = 10,
    kTextureFieldNumber = 11,
    kBoundingSphereFieldNumber = 12,
    kModeFieldNumber = 3,
    kTriCountFieldNumber = 4,
    kVertCountFieldNumber = 5,
    kEnabledFieldNumber = 16,
  };
  // repeated float rotation = 13;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;

  public:
  void clear_rotation() ;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::google::protobuf::RepeatedField<float>& rotation() const;
  ::google::protobuf::RepeatedField<float>* mutable_rotation();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_rotation() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_rotation();

  public:
  // repeated float translation = 14;
  int translation_size() const;
  private:
  int _internal_translation_size() const;

  public:
  void clear_translation() ;
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::google::protobuf::RepeatedField<float>& translation() const;
  ::google::protobuf::RepeatedField<float>* mutable_translation();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_translation() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_translation();

  public:
  // repeated float scale = 15;
  int scale_size() const;
  private:
  int _internal_scale_size() const;

  public:
  void clear_scale() ;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::google::protobuf::RepeatedField<float>& scale() const;
  ::google::protobuf::RepeatedField<float>* mutable_scale();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_scale() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_scale();

  public:
  // optional bytes pVersion = 1;
  bool has_pversion() const;
  void clear_pversion() ;
  const std::string& pversion() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pversion(Arg_&& arg, Args_... args);
  std::string* mutable_pversion();
  PROTOBUF_NODISCARD std::string* release_pversion();
  void set_allocated_pversion(std::string* value);

  private:
  const std::string& _internal_pversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pversion(
      const std::string& value);
  std::string* _internal_mutable_pversion();

  public:
  // optional bytes pMeshName = 2;
  bool has_pmeshname() const;
  void clear_pmeshname() ;
  const std::string& pmeshname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pmeshname(Arg_&& arg, Args_... args);
  std::string* mutable_pmeshname();
  PROTOBUF_NODISCARD std::string* release_pmeshname();
  void set_allocated_pmeshname(std::string* value);

  private:
  const std::string& _internal_pmeshname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pmeshname(
      const std::string& value);
  std::string* _internal_mutable_pmeshname();

  public:
  // optional .vboData_proto vbo_vert = 6;
  bool has_vbo_vert() const;
  void clear_vbo_vert() ;
  const ::vboData_proto& vbo_vert() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_vert();
  ::vboData_proto* mutable_vbo_vert();
  void set_allocated_vbo_vert(::vboData_proto* value);
  void unsafe_arena_set_allocated_vbo_vert(::vboData_proto* value);
  ::vboData_proto* unsafe_arena_release_vbo_vert();

  private:
  const ::vboData_proto& _internal_vbo_vert() const;
  ::vboData_proto* _internal_mutable_vbo_vert();

  public:
  // optional .vboData_proto vbo_norm = 7;
  bool has_vbo_norm() const;
  void clear_vbo_norm() ;
  const ::vboData_proto& vbo_norm() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_norm();
  ::vboData_proto* mutable_vbo_norm();
  void set_allocated_vbo_norm(::vboData_proto* value);
  void unsafe_arena_set_allocated_vbo_norm(::vboData_proto* value);
  ::vboData_proto* unsafe_arena_release_vbo_norm();

  private:
  const ::vboData_proto& _internal_vbo_norm() const;
  ::vboData_proto* _internal_mutable_vbo_norm();

  public:
  // optional .vboData_proto vbo_uv = 8;
  bool has_vbo_uv() const;
  void clear_vbo_uv() ;
  const ::vboData_proto& vbo_uv() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_uv();
  ::vboData_proto* mutable_vbo_uv();
  void set_allocated_vbo_uv(::vboData_proto* value);
  void unsafe_arena_set_allocated_vbo_uv(::vboData_proto* value);
  ::vboData_proto* unsafe_arena_release_vbo_uv();

  private:
  const ::vboData_proto& _internal_vbo_uv() const;
  ::vboData_proto* _internal_mutable_vbo_uv();

  public:
  // optional .vboData_proto vbo_index = 9;
  bool has_vbo_index() const;
  void clear_vbo_index() ;
  const ::vboData_proto& vbo_index() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_index();
  ::vboData_proto* mutable_vbo_index();
  void set_allocated_vbo_index(::vboData_proto* value);
  void unsafe_arena_set_allocated_vbo_index(::vboData_proto* value);
  ::vboData_proto* unsafe_arena_release_vbo_index();

  private:
  const ::vboData_proto& _internal_vbo_index() const;
  ::vboData_proto* _internal_mutable_vbo_index();

  public:
  // optional .vboData_proto vbo_color = 10;
  bool has_vbo_color() const;
  void clear_vbo_color() ;
  const ::vboData_proto& vbo_color() const;
  PROTOBUF_NODISCARD ::vboData_proto* release_vbo_color();
  ::vboData_proto* mutable_vbo_color();
  void set_allocated_vbo_color(::vboData_proto* value);
  void unsafe_arena_set_allocated_vbo_color(::vboData_proto* value);
  ::vboData_proto* unsafe_arena_release_vbo_color();

  private:
  const ::vboData_proto& _internal_vbo_color() const;
  ::vboData_proto* _internal_mutable_vbo_color();

  public:
  // optional .textureData_proto texture = 11;
  bool has_texture() const;
  void clear_texture() ;
  const ::textureData_proto& texture() const;
  PROTOBUF_NODISCARD ::textureData_proto* release_texture();
  ::textureData_proto* mutable_texture();
  void set_allocated_texture(::textureData_proto* value);
  void unsafe_arena_set_allocated_texture(::textureData_proto* value);
  ::textureData_proto* unsafe_arena_release_texture();

  private:
  const ::textureData_proto& _internal_texture() const;
  ::textureData_proto* _internal_mutable_texture();

  public:
  // optional .boundingSphereData_proto bounding_sphere = 12;
  bool has_bounding_sphere() const;
  void clear_bounding_sphere() ;
  const ::boundingSphereData_proto& bounding_sphere() const;
  PROTOBUF_NODISCARD ::boundingSphereData_proto* release_bounding_sphere();
  ::boundingSphereData_proto* mutable_bounding_sphere();
  void set_allocated_bounding_sphere(::boundingSphereData_proto* value);
  void unsafe_arena_set_allocated_bounding_sphere(::boundingSphereData_proto* value);
  ::boundingSphereData_proto* unsafe_arena_release_bounding_sphere();

  private:
  const ::boundingSphereData_proto& _internal_bounding_sphere() const;
  ::boundingSphereData_proto* _internal_mutable_bounding_sphere();

  public:
  // optional .meshData_proto.RENDER_MODE mode = 3;
  bool has_mode() const;
  void clear_mode() ;
  ::meshData_proto_RENDER_MODE mode() const;
  void set_mode(::meshData_proto_RENDER_MODE value);

  private:
  ::meshData_proto_RENDER_MODE _internal_mode() const;
  void _internal_set_mode(::meshData_proto_RENDER_MODE value);

  public:
  // optional uint32 triCount = 4;
  bool has_tricount() const;
  void clear_tricount() ;
  ::uint32_t tricount() const;
  void set_tricount(::uint32_t value);

  private:
  ::uint32_t _internal_tricount() const;
  void _internal_set_tricount(::uint32_t value);

  public:
  // optional uint32 vertCount = 5;
  bool has_vertcount() const;
  void clear_vertcount() ;
  ::uint32_t vertcount() const;
  void set_vertcount(::uint32_t value);

  private:
  ::uint32_t _internal_vertcount() const;
  void _internal_set_vertcount(::uint32_t value);

  public:
  // optional bool enabled = 16;
  bool has_enabled() const;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:meshData_proto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 7,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_meshData_proto_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const meshData_proto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> rotation_;
    ::google::protobuf::RepeatedField<float> translation_;
    ::google::protobuf::RepeatedField<float> scale_;
    ::google::protobuf::internal::ArenaStringPtr pversion_;
    ::google::protobuf::internal::ArenaStringPtr pmeshname_;
    ::vboData_proto* vbo_vert_;
    ::vboData_proto* vbo_norm_;
    ::vboData_proto* vbo_uv_;
    ::vboData_proto* vbo_index_;
    ::vboData_proto* vbo_color_;
    ::textureData_proto* texture_;
    ::boundingSphereData_proto* bounding_sphere_;
    int mode_;
    ::uint32_t tricount_;
    ::uint32_t vertcount_;
    bool enabled_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meshData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// meshData_proto

// optional bytes pVersion = 1;
inline bool meshData_proto::has_pversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void meshData_proto::clear_pversion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pversion_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& meshData_proto::pversion() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.pVersion)
  return _internal_pversion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void meshData_proto::set_pversion(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pversion_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshData_proto.pVersion)
}
inline std::string* meshData_proto::mutable_pversion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pversion();
  // @@protoc_insertion_point(field_mutable:meshData_proto.pVersion)
  return _s;
}
inline const std::string& meshData_proto::_internal_pversion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pversion_.Get();
}
inline void meshData_proto::_internal_set_pversion(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pversion_.Set(value, GetArena());
}
inline std::string* meshData_proto::_internal_mutable_pversion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pversion_.Mutable( GetArena());
}
inline std::string* meshData_proto::release_pversion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.pVersion)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.pversion_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pversion_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void meshData_proto::set_allocated_pversion(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pversion_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pversion_.IsDefault()) {
          _impl_.pversion_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.pVersion)
}

// optional bytes pMeshName = 2;
inline bool meshData_proto::has_pmeshname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void meshData_proto::clear_pmeshname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pmeshname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& meshData_proto::pmeshname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.pMeshName)
  return _internal_pmeshname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void meshData_proto::set_pmeshname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pmeshname_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:meshData_proto.pMeshName)
}
inline std::string* meshData_proto::mutable_pmeshname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pmeshname();
  // @@protoc_insertion_point(field_mutable:meshData_proto.pMeshName)
  return _s;
}
inline const std::string& meshData_proto::_internal_pmeshname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pmeshname_.Get();
}
inline void meshData_proto::_internal_set_pmeshname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pmeshname_.Set(value, GetArena());
}
inline std::string* meshData_proto::_internal_mutable_pmeshname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pmeshname_.Mutable( GetArena());
}
inline std::string* meshData_proto::release_pmeshname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.pMeshName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.pmeshname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pmeshname_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void meshData_proto::set_allocated_pmeshname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pmeshname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pmeshname_.IsDefault()) {
          _impl_.pmeshname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.pMeshName)
}

// optional .meshData_proto.RENDER_MODE mode = 3;
inline bool meshData_proto::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void meshData_proto::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::meshData_proto_RENDER_MODE meshData_proto::mode() const {
  // @@protoc_insertion_point(field_get:meshData_proto.mode)
  return _internal_mode();
}
inline void meshData_proto::set_mode(::meshData_proto_RENDER_MODE value) {
  _internal_set_mode(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:meshData_proto.mode)
}
inline ::meshData_proto_RENDER_MODE meshData_proto::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::meshData_proto_RENDER_MODE>(_impl_.mode_);
}
inline void meshData_proto::_internal_set_mode(::meshData_proto_RENDER_MODE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// optional uint32 triCount = 4;
inline bool meshData_proto::has_tricount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void meshData_proto::clear_tricount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tricount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t meshData_proto::tricount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.triCount)
  return _internal_tricount();
}
inline void meshData_proto::set_tricount(::uint32_t value) {
  _internal_set_tricount(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:meshData_proto.triCount)
}
inline ::uint32_t meshData_proto::_internal_tricount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tricount_;
}
inline void meshData_proto::_internal_set_tricount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tricount_ = value;
}

// optional uint32 vertCount = 5;
inline bool meshData_proto::has_vertcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void meshData_proto::clear_vertcount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t meshData_proto::vertcount() const {
  // @@protoc_insertion_point(field_get:meshData_proto.vertCount)
  return _internal_vertcount();
}
inline void meshData_proto::set_vertcount(::uint32_t value) {
  _internal_set_vertcount(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:meshData_proto.vertCount)
}
inline ::uint32_t meshData_proto::_internal_vertcount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vertcount_;
}
inline void meshData_proto::_internal_set_vertcount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertcount_ = value;
}

// optional .vboData_proto vbo_vert = 6;
inline bool meshData_proto::has_vbo_vert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_vert_ != nullptr);
  return value;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_vert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vboData_proto* p = _impl_.vbo_vert_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_vert() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_vert)
  return _internal_vbo_vert();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_vert(::vboData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_vert_);
  }
  _impl_.vbo_vert_ = reinterpret_cast<::vboData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_vert)
}
inline ::vboData_proto* meshData_proto::release_vbo_vert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::vboData_proto* released = _impl_.vbo_vert_;
  _impl_.vbo_vert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_vert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_vert)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::vboData_proto* temp = _impl_.vbo_vert_;
  _impl_.vbo_vert_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_vert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vbo_vert_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::vboData_proto>(GetArena());
    _impl_.vbo_vert_ = reinterpret_cast<::vboData_proto*>(p);
  }
  return _impl_.vbo_vert_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_vert() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::vboData_proto* _msg = _internal_mutable_vbo_vert();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_vert)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_vert(::vboData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_vert_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.vbo_vert_ = reinterpret_cast<::vboData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_vert)
}

// optional .vboData_proto vbo_norm = 7;
inline bool meshData_proto::has_vbo_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_norm_ != nullptr);
  return value;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_norm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vboData_proto* p = _impl_.vbo_norm_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_norm() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_norm)
  return _internal_vbo_norm();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_norm(::vboData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_norm_);
  }
  _impl_.vbo_norm_ = reinterpret_cast<::vboData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_norm)
}
inline ::vboData_proto* meshData_proto::release_vbo_norm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::vboData_proto* released = _impl_.vbo_norm_;
  _impl_.vbo_norm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_norm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_norm)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::vboData_proto* temp = _impl_.vbo_norm_;
  _impl_.vbo_norm_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_norm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vbo_norm_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::vboData_proto>(GetArena());
    _impl_.vbo_norm_ = reinterpret_cast<::vboData_proto*>(p);
  }
  return _impl_.vbo_norm_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_norm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::vboData_proto* _msg = _internal_mutable_vbo_norm();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_norm)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_norm(::vboData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_norm_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.vbo_norm_ = reinterpret_cast<::vboData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_norm)
}

// optional .vboData_proto vbo_uv = 8;
inline bool meshData_proto::has_vbo_uv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_uv_ != nullptr);
  return value;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_uv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vboData_proto* p = _impl_.vbo_uv_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_uv() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_uv)
  return _internal_vbo_uv();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_uv(::vboData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_uv_);
  }
  _impl_.vbo_uv_ = reinterpret_cast<::vboData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_uv)
}
inline ::vboData_proto* meshData_proto::release_vbo_uv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::vboData_proto* released = _impl_.vbo_uv_;
  _impl_.vbo_uv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_uv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_uv)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::vboData_proto* temp = _impl_.vbo_uv_;
  _impl_.vbo_uv_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_uv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vbo_uv_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::vboData_proto>(GetArena());
    _impl_.vbo_uv_ = reinterpret_cast<::vboData_proto*>(p);
  }
  return _impl_.vbo_uv_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_uv() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::vboData_proto* _msg = _internal_mutable_vbo_uv();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_uv)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_uv(::vboData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_uv_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.vbo_uv_ = reinterpret_cast<::vboData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_uv)
}

// optional .vboData_proto vbo_index = 9;
inline bool meshData_proto::has_vbo_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_index_ != nullptr);
  return value;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vboData_proto* p = _impl_.vbo_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_index() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_index)
  return _internal_vbo_index();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_index(::vboData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_index_);
  }
  _impl_.vbo_index_ = reinterpret_cast<::vboData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_index)
}
inline ::vboData_proto* meshData_proto::release_vbo_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::vboData_proto* released = _impl_.vbo_index_;
  _impl_.vbo_index_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_index)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::vboData_proto* temp = _impl_.vbo_index_;
  _impl_.vbo_index_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vbo_index_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::vboData_proto>(GetArena());
    _impl_.vbo_index_ = reinterpret_cast<::vboData_proto*>(p);
  }
  return _impl_.vbo_index_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_index() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::vboData_proto* _msg = _internal_mutable_vbo_index();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_index)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_index(::vboData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_index_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.vbo_index_ = reinterpret_cast<::vboData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_index)
}

// optional .vboData_proto vbo_color = 10;
inline bool meshData_proto::has_vbo_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vbo_color_ != nullptr);
  return value;
}
inline const ::vboData_proto& meshData_proto::_internal_vbo_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::vboData_proto* p = _impl_.vbo_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::vboData_proto&>(::_vboData_proto_default_instance_);
}
inline const ::vboData_proto& meshData_proto::vbo_color() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.vbo_color)
  return _internal_vbo_color();
}
inline void meshData_proto::unsafe_arena_set_allocated_vbo_color(::vboData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_color_);
  }
  _impl_.vbo_color_ = reinterpret_cast<::vboData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.vbo_color)
}
inline ::vboData_proto* meshData_proto::release_vbo_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::vboData_proto* released = _impl_.vbo_color_;
  _impl_.vbo_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::vboData_proto* meshData_proto::unsafe_arena_release_vbo_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.vbo_color)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::vboData_proto* temp = _impl_.vbo_color_;
  _impl_.vbo_color_ = nullptr;
  return temp;
}
inline ::vboData_proto* meshData_proto::_internal_mutable_vbo_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vbo_color_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::vboData_proto>(GetArena());
    _impl_.vbo_color_ = reinterpret_cast<::vboData_proto*>(p);
  }
  return _impl_.vbo_color_;
}
inline ::vboData_proto* meshData_proto::mutable_vbo_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::vboData_proto* _msg = _internal_mutable_vbo_color();
  // @@protoc_insertion_point(field_mutable:meshData_proto.vbo_color)
  return _msg;
}
inline void meshData_proto::set_allocated_vbo_color(::vboData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vbo_color_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.vbo_color_ = reinterpret_cast<::vboData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.vbo_color)
}

// optional .textureData_proto texture = 11;
inline bool meshData_proto::has_texture() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.texture_ != nullptr);
  return value;
}
inline const ::textureData_proto& meshData_proto::_internal_texture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::textureData_proto* p = _impl_.texture_;
  return p != nullptr ? *p : reinterpret_cast<const ::textureData_proto&>(::_textureData_proto_default_instance_);
}
inline const ::textureData_proto& meshData_proto::texture() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.texture)
  return _internal_texture();
}
inline void meshData_proto::unsafe_arena_set_allocated_texture(::textureData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.texture_);
  }
  _impl_.texture_ = reinterpret_cast<::textureData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.texture)
}
inline ::textureData_proto* meshData_proto::release_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::textureData_proto* released = _impl_.texture_;
  _impl_.texture_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::textureData_proto* meshData_proto::unsafe_arena_release_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.texture)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::textureData_proto* temp = _impl_.texture_;
  _impl_.texture_ = nullptr;
  return temp;
}
inline ::textureData_proto* meshData_proto::_internal_mutable_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.texture_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::textureData_proto>(GetArena());
    _impl_.texture_ = reinterpret_cast<::textureData_proto*>(p);
  }
  return _impl_.texture_;
}
inline ::textureData_proto* meshData_proto::mutable_texture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::textureData_proto* _msg = _internal_mutable_texture();
  // @@protoc_insertion_point(field_mutable:meshData_proto.texture)
  return _msg;
}
inline void meshData_proto::set_allocated_texture(::textureData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.texture_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.texture_ = reinterpret_cast<::textureData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.texture)
}

// optional .boundingSphereData_proto bounding_sphere = 12;
inline bool meshData_proto::has_bounding_sphere() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounding_sphere_ != nullptr);
  return value;
}
inline const ::boundingSphereData_proto& meshData_proto::_internal_bounding_sphere() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::boundingSphereData_proto* p = _impl_.bounding_sphere_;
  return p != nullptr ? *p : reinterpret_cast<const ::boundingSphereData_proto&>(::_boundingSphereData_proto_default_instance_);
}
inline const ::boundingSphereData_proto& meshData_proto::bounding_sphere() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:meshData_proto.bounding_sphere)
  return _internal_bounding_sphere();
}
inline void meshData_proto::unsafe_arena_set_allocated_bounding_sphere(::boundingSphereData_proto* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounding_sphere_);
  }
  _impl_.bounding_sphere_ = reinterpret_cast<::boundingSphereData_proto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:meshData_proto.bounding_sphere)
}
inline ::boundingSphereData_proto* meshData_proto::release_bounding_sphere() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::boundingSphereData_proto* released = _impl_.bounding_sphere_;
  _impl_.bounding_sphere_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::boundingSphereData_proto* meshData_proto::unsafe_arena_release_bounding_sphere() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:meshData_proto.bounding_sphere)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::boundingSphereData_proto* temp = _impl_.bounding_sphere_;
  _impl_.bounding_sphere_ = nullptr;
  return temp;
}
inline ::boundingSphereData_proto* meshData_proto::_internal_mutable_bounding_sphere() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bounding_sphere_ == nullptr) {
    auto* p = ::google::protobuf::MessageLite::DefaultConstruct<::boundingSphereData_proto>(GetArena());
    _impl_.bounding_sphere_ = reinterpret_cast<::boundingSphereData_proto*>(p);
  }
  return _impl_.bounding_sphere_;
}
inline ::boundingSphereData_proto* meshData_proto::mutable_bounding_sphere() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::boundingSphereData_proto* _msg = _internal_mutable_bounding_sphere();
  // @@protoc_insertion_point(field_mutable:meshData_proto.bounding_sphere)
  return _msg;
}
inline void meshData_proto::set_allocated_bounding_sphere(::boundingSphereData_proto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounding_sphere_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.bounding_sphere_ = reinterpret_cast<::boundingSphereData_proto*>(value);
  // @@protoc_insertion_point(field_set_allocated:meshData_proto.bounding_sphere)
}

// repeated float rotation = 13;
inline int meshData_proto::_internal_rotation_size() const {
  return _internal_rotation().size();
}
inline int meshData_proto::rotation_size() const {
  return _internal_rotation_size();
}
inline void meshData_proto::clear_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rotation_.Clear();
}
inline float meshData_proto::rotation(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.rotation)
  return _internal_rotation().Get(index);
}
inline void meshData_proto::set_rotation(int index, float value) {
  _internal_mutable_rotation()->Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.rotation)
}
inline void meshData_proto::add_rotation(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_rotation()->Add(value);
  // @@protoc_insertion_point(field_add:meshData_proto.rotation)
}
inline const ::google::protobuf::RepeatedField<float>& meshData_proto::rotation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:meshData_proto.rotation)
  return _internal_rotation();
}
inline ::google::protobuf::RepeatedField<float>* meshData_proto::mutable_rotation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.rotation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rotation();
}
inline const ::google::protobuf::RepeatedField<float>&
meshData_proto::_internal_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rotation_;
}
inline ::google::protobuf::RepeatedField<float>* meshData_proto::_internal_mutable_rotation() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rotation_;
}

// repeated float translation = 14;
inline int meshData_proto::_internal_translation_size() const {
  return _internal_translation().size();
}
inline int meshData_proto::translation_size() const {
  return _internal_translation_size();
}
inline void meshData_proto::clear_translation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.translation_.Clear();
}
inline float meshData_proto::translation(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.translation)
  return _internal_translation().Get(index);
}
inline void meshData_proto::set_translation(int index, float value) {
  _internal_mutable_translation()->Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.translation)
}
inline void meshData_proto::add_translation(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_translation()->Add(value);
  // @@protoc_insertion_point(field_add:meshData_proto.translation)
}
inline const ::google::protobuf::RepeatedField<float>& meshData_proto::translation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:meshData_proto.translation)
  return _internal_translation();
}
inline ::google::protobuf::RepeatedField<float>* meshData_proto::mutable_translation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.translation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_translation();
}
inline const ::google::protobuf::RepeatedField<float>&
meshData_proto::_internal_translation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.translation_;
}
inline ::google::protobuf::RepeatedField<float>* meshData_proto::_internal_mutable_translation() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.translation_;
}

// repeated float scale = 15;
inline int meshData_proto::_internal_scale_size() const {
  return _internal_scale().size();
}
inline int meshData_proto::scale_size() const {
  return _internal_scale_size();
}
inline void meshData_proto::clear_scale() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scale_.Clear();
}
inline float meshData_proto::scale(int index) const {
  // @@protoc_insertion_point(field_get:meshData_proto.scale)
  return _internal_scale().Get(index);
}
inline void meshData_proto::set_scale(int index, float value) {
  _internal_mutable_scale()->Set(index, value);
  // @@protoc_insertion_point(field_set:meshData_proto.scale)
}
inline void meshData_proto::add_scale(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_scale()->Add(value);
  // @@protoc_insertion_point(field_add:meshData_proto.scale)
}
inline const ::google::protobuf::RepeatedField<float>& meshData_proto::scale() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:meshData_proto.scale)
  return _internal_scale();
}
inline ::google::protobuf::RepeatedField<float>* meshData_proto::mutable_scale()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:meshData_proto.scale)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_scale();
}
inline const ::google::protobuf::RepeatedField<float>&
meshData_proto::_internal_scale() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scale_;
}
inline ::google::protobuf::RepeatedField<float>* meshData_proto::_internal_mutable_scale() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.scale_;
}

// optional bool enabled = 16;
inline bool meshData_proto::has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void meshData_proto::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool meshData_proto::enabled() const {
  // @@protoc_insertion_point(field_get:meshData_proto.enabled)
  return _internal_enabled();
}
inline void meshData_proto::set_enabled(bool value) {
  _internal_set_enabled(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:meshData_proto.enabled)
}
inline bool meshData_proto::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_;
}
inline void meshData_proto::_internal_set_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::meshData_proto_RENDER_MODE> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_meshData_2eproto_2epb_2eh
