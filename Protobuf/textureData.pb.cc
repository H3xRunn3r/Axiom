// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: textureData.proto
// Protobuf C++ Version: 5.27.2

#include "textureData.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr textureData_proto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filenamedata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        podata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pversion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        texttype_{static_cast< ::textureData_proto_TEXTURE_TYPE >(0)},
        magfilter_{static_cast< ::textureData_proto_TEXTURE_MAG_FILTER >(0)},
        minfilter_{static_cast< ::textureData_proto_TEXTURE_MIN_FILTER >(0)},
        wraps_{static_cast< ::textureData_proto_TEXTURE_WRAP >(0)},
        wrapt_{static_cast< ::textureData_proto_TEXTURE_WRAP >(0)},
        eformat_{static_cast< ::textureData_proto_TEXTURE_EFORMAT >(0)},
        ncomponent_{static_cast< ::textureData_proto_TEXTURE_NCOMPONENT >(0)},
        width_{0u},
        height_{0u},
        component_{0u},
        bits_{0u},
        pixel_type_{static_cast< ::textureData_proto_TEXTURE_COMPONENT >(0)},
        filenamesize_{0u},
        datasize_{0u},
        md5_{0u},
        enabled_{false},
        as_is_{false} {}

template <typename>
PROTOBUF_CONSTEXPR textureData_proto::textureData_proto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct textureData_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR textureData_protoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~textureData_protoDefaultTypeInternal() {}
  union {
    textureData_proto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 textureData_protoDefaultTypeInternal _textureData_proto_default_instance_;
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_EFORMAT_internal_data_[] = {
    196608u, 0u, };
bool textureData_proto_TEXTURE_EFORMAT_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_EFORMAT_strings[3] = {};

static const char textureData_proto_TEXTURE_EFORMAT_names[] = {
    "EFORMAT_BGR"
    "EFORMAT_RGB"
    "EFORMAT_RGBA"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_EFORMAT_entries[] =
    {
        {{&textureData_proto_TEXTURE_EFORMAT_names[0], 11}, 0},
        {{&textureData_proto_TEXTURE_EFORMAT_names[11], 11}, 1},
        {{&textureData_proto_TEXTURE_EFORMAT_names[22], 12}, 2},
};

static const int textureData_proto_TEXTURE_EFORMAT_entries_by_number[] = {
    0,  // 0 -> EFORMAT_BGR
    1,  // 1 -> EFORMAT_RGB
    2,  // 2 -> EFORMAT_RGBA
};

const std::string& textureData_proto_TEXTURE_EFORMAT_Name(textureData_proto_TEXTURE_EFORMAT value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_EFORMAT_entries, textureData_proto_TEXTURE_EFORMAT_entries_by_number,
          3, textureData_proto_TEXTURE_EFORMAT_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_EFORMAT_entries, textureData_proto_TEXTURE_EFORMAT_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_EFORMAT_strings[idx].get();
}

bool textureData_proto_TEXTURE_EFORMAT_Parse(absl::string_view name, textureData_proto_TEXTURE_EFORMAT* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_EFORMAT_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_EFORMAT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto::EFORMAT_BGR;
constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto::EFORMAT_RGB;
constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto::EFORMAT_RGBA;
constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto::TEXTURE_EFORMAT_MIN;
constexpr textureData_proto_TEXTURE_EFORMAT textureData_proto::TEXTURE_EFORMAT_MAX;
constexpr int textureData_proto::TEXTURE_EFORMAT_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_NCOMPONENT_internal_data_[] = {
    196608u, 0u, };
bool textureData_proto_TEXTURE_NCOMPONENT_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_NCOMPONENT_strings[3] = {};

static const char textureData_proto_TEXTURE_NCOMPONENT_names[] = {
    "NCOMPONENT_BGR"
    "NCOMPONENT_RGB"
    "NCOMPONENT_RGBA"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_NCOMPONENT_entries[] =
    {
        {{&textureData_proto_TEXTURE_NCOMPONENT_names[0], 14}, 0},
        {{&textureData_proto_TEXTURE_NCOMPONENT_names[14], 14}, 1},
        {{&textureData_proto_TEXTURE_NCOMPONENT_names[28], 15}, 2},
};

static const int textureData_proto_TEXTURE_NCOMPONENT_entries_by_number[] = {
    0,  // 0 -> NCOMPONENT_BGR
    1,  // 1 -> NCOMPONENT_RGB
    2,  // 2 -> NCOMPONENT_RGBA
};

const std::string& textureData_proto_TEXTURE_NCOMPONENT_Name(textureData_proto_TEXTURE_NCOMPONENT value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_NCOMPONENT_entries, textureData_proto_TEXTURE_NCOMPONENT_entries_by_number,
          3, textureData_proto_TEXTURE_NCOMPONENT_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_NCOMPONENT_entries, textureData_proto_TEXTURE_NCOMPONENT_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_NCOMPONENT_strings[idx].get();
}

bool textureData_proto_TEXTURE_NCOMPONENT_Parse(absl::string_view name, textureData_proto_TEXTURE_NCOMPONENT* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_NCOMPONENT_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_NCOMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto::NCOMPONENT_BGR;
constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto::NCOMPONENT_RGB;
constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto::NCOMPONENT_RGBA;
constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto::TEXTURE_NCOMPONENT_MIN;
constexpr textureData_proto_TEXTURE_NCOMPONENT textureData_proto::TEXTURE_NCOMPONENT_MAX;
constexpr int textureData_proto::TEXTURE_NCOMPONENT_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_TYPE_internal_data_[] = {
    327680u, 0u, };
bool textureData_proto_TEXTURE_TYPE_IsValid(int value) {
  return 0 <= value && value <= 4;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_TYPE_strings[5] = {};

static const char textureData_proto_TEXTURE_TYPE_names[] = {
    "BMP"
    "GIF"
    "JPEG"
    "PNG"
    "TGA"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_TYPE_entries[] =
    {
        {{&textureData_proto_TEXTURE_TYPE_names[0], 3}, 2},
        {{&textureData_proto_TEXTURE_TYPE_names[3], 3}, 3},
        {{&textureData_proto_TEXTURE_TYPE_names[6], 4}, 0},
        {{&textureData_proto_TEXTURE_TYPE_names[10], 3}, 1},
        {{&textureData_proto_TEXTURE_TYPE_names[13], 3}, 4},
};

static const int textureData_proto_TEXTURE_TYPE_entries_by_number[] = {
    2,  // 0 -> JPEG
    3,  // 1 -> PNG
    0,  // 2 -> BMP
    1,  // 3 -> GIF
    4,  // 4 -> TGA
};

const std::string& textureData_proto_TEXTURE_TYPE_Name(textureData_proto_TEXTURE_TYPE value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_TYPE_entries, textureData_proto_TEXTURE_TYPE_entries_by_number,
          5, textureData_proto_TEXTURE_TYPE_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_TYPE_entries, textureData_proto_TEXTURE_TYPE_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_TYPE_strings[idx].get();
}

bool textureData_proto_TEXTURE_TYPE_Parse(absl::string_view name, textureData_proto_TEXTURE_TYPE* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_TYPE_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_TYPE textureData_proto::JPEG;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto::PNG;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto::BMP;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto::GIF;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto::TGA;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto::TEXTURE_TYPE_MIN;
constexpr textureData_proto_TEXTURE_TYPE textureData_proto::TEXTURE_TYPE_MAX;
constexpr int textureData_proto::TEXTURE_TYPE_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_MAG_FILTER_internal_data_[] = {
    131072u, 0u, };
bool textureData_proto_TEXTURE_MAG_FILTER_IsValid(int value) {
  return 0 <= value && value <= 1;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_MAG_FILTER_strings[2] = {};

static const char textureData_proto_TEXTURE_MAG_FILTER_names[] = {
    "MAG_LINEAR"
    "MAG_NEAREST"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_MAG_FILTER_entries[] =
    {
        {{&textureData_proto_TEXTURE_MAG_FILTER_names[0], 10}, 1},
        {{&textureData_proto_TEXTURE_MAG_FILTER_names[10], 11}, 0},
};

static const int textureData_proto_TEXTURE_MAG_FILTER_entries_by_number[] = {
    1,  // 0 -> MAG_NEAREST
    0,  // 1 -> MAG_LINEAR
};

const std::string& textureData_proto_TEXTURE_MAG_FILTER_Name(textureData_proto_TEXTURE_MAG_FILTER value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_MAG_FILTER_entries, textureData_proto_TEXTURE_MAG_FILTER_entries_by_number,
          2, textureData_proto_TEXTURE_MAG_FILTER_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_MAG_FILTER_entries, textureData_proto_TEXTURE_MAG_FILTER_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_MAG_FILTER_strings[idx].get();
}

bool textureData_proto_TEXTURE_MAG_FILTER_Parse(absl::string_view name, textureData_proto_TEXTURE_MAG_FILTER* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_MAG_FILTER_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_MAG_FILTER>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto::MAG_NEAREST;
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto::MAG_LINEAR;
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto::TEXTURE_MAG_FILTER_MIN;
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto::TEXTURE_MAG_FILTER_MAX;
constexpr int textureData_proto::TEXTURE_MAG_FILTER_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_MIN_FILTER_internal_data_[] = {
    393216u, 0u, };
bool textureData_proto_TEXTURE_MIN_FILTER_IsValid(int value) {
  return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_MIN_FILTER_strings[6] = {};

static const char textureData_proto_TEXTURE_MIN_FILTER_names[] = {
    "MIN_LINEAR"
    "MIN_LINEAR_MIPMAP_LINEAR"
    "MIN_LINEAR_MIPMAP_NEAREST"
    "MIN_NEAREST"
    "MIN_NEAREST_MIPMAP_LINEAR"
    "MIN_NEAREST_MIPMAP_NEAREST"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_MIN_FILTER_entries[] =
    {
        {{&textureData_proto_TEXTURE_MIN_FILTER_names[0], 10}, 1},
        {{&textureData_proto_TEXTURE_MIN_FILTER_names[10], 24}, 5},
        {{&textureData_proto_TEXTURE_MIN_FILTER_names[34], 25}, 3},
        {{&textureData_proto_TEXTURE_MIN_FILTER_names[59], 11}, 0},
        {{&textureData_proto_TEXTURE_MIN_FILTER_names[70], 25}, 4},
        {{&textureData_proto_TEXTURE_MIN_FILTER_names[95], 26}, 2},
};

static const int textureData_proto_TEXTURE_MIN_FILTER_entries_by_number[] = {
    3,  // 0 -> MIN_NEAREST
    0,  // 1 -> MIN_LINEAR
    5,  // 2 -> MIN_NEAREST_MIPMAP_NEAREST
    2,  // 3 -> MIN_LINEAR_MIPMAP_NEAREST
    4,  // 4 -> MIN_NEAREST_MIPMAP_LINEAR
    1,  // 5 -> MIN_LINEAR_MIPMAP_LINEAR
};

const std::string& textureData_proto_TEXTURE_MIN_FILTER_Name(textureData_proto_TEXTURE_MIN_FILTER value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_MIN_FILTER_entries, textureData_proto_TEXTURE_MIN_FILTER_entries_by_number,
          6, textureData_proto_TEXTURE_MIN_FILTER_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_MIN_FILTER_entries, textureData_proto_TEXTURE_MIN_FILTER_entries_by_number, 6,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_MIN_FILTER_strings[idx].get();
}

bool textureData_proto_TEXTURE_MIN_FILTER_Parse(absl::string_view name, textureData_proto_TEXTURE_MIN_FILTER* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_MIN_FILTER_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_MIN_FILTER>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::MIN_NEAREST;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::MIN_LINEAR;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::MIN_NEAREST_MIPMAP_NEAREST;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::MIN_LINEAR_MIPMAP_NEAREST;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::MIN_NEAREST_MIPMAP_LINEAR;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::MIN_LINEAR_MIPMAP_LINEAR;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::TEXTURE_MIN_FILTER_MIN;
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto::TEXTURE_MIN_FILTER_MAX;
constexpr int textureData_proto::TEXTURE_MIN_FILTER_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_WRAP_internal_data_[] = {
    196608u, 0u, };
bool textureData_proto_TEXTURE_WRAP_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_WRAP_strings[3] = {};

static const char textureData_proto_TEXTURE_WRAP_names[] = {
    "WRAP_CLAMP_TO_EDGE"
    "WRAP_MIRRORED_REPEAT"
    "WRAP_REPEAT"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_WRAP_entries[] =
    {
        {{&textureData_proto_TEXTURE_WRAP_names[0], 18}, 0},
        {{&textureData_proto_TEXTURE_WRAP_names[18], 20}, 1},
        {{&textureData_proto_TEXTURE_WRAP_names[38], 11}, 2},
};

static const int textureData_proto_TEXTURE_WRAP_entries_by_number[] = {
    0,  // 0 -> WRAP_CLAMP_TO_EDGE
    1,  // 1 -> WRAP_MIRRORED_REPEAT
    2,  // 2 -> WRAP_REPEAT
};

const std::string& textureData_proto_TEXTURE_WRAP_Name(textureData_proto_TEXTURE_WRAP value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_WRAP_entries, textureData_proto_TEXTURE_WRAP_entries_by_number,
          3, textureData_proto_TEXTURE_WRAP_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_WRAP_entries, textureData_proto_TEXTURE_WRAP_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_WRAP_strings[idx].get();
}

bool textureData_proto_TEXTURE_WRAP_Parse(absl::string_view name, textureData_proto_TEXTURE_WRAP* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_WRAP_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_WRAP>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_WRAP textureData_proto::WRAP_CLAMP_TO_EDGE;
constexpr textureData_proto_TEXTURE_WRAP textureData_proto::WRAP_MIRRORED_REPEAT;
constexpr textureData_proto_TEXTURE_WRAP textureData_proto::WRAP_REPEAT;
constexpr textureData_proto_TEXTURE_WRAP textureData_proto::TEXTURE_WRAP_MIN;
constexpr textureData_proto_TEXTURE_WRAP textureData_proto::TEXTURE_WRAP_MAX;
constexpr int textureData_proto::TEXTURE_WRAP_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t textureData_proto_TEXTURE_COMPONENT_internal_data_[] = {
    524288u, 0u, };
bool textureData_proto_TEXTURE_COMPONENT_IsValid(int value) {
  return 0 <= value && value <= 7;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    textureData_proto_TEXTURE_COMPONENT_strings[8] = {};

static const char textureData_proto_TEXTURE_COMPONENT_names[] = {
    "BYTE"
    "DOUBLE"
    "FLOAT"
    "INT"
    "SHORT"
    "UNSIGNED_BYTE"
    "UNSIGNED_INT"
    "UNSIGNED_SHORT"
};

static const ::google::protobuf::internal::EnumEntry textureData_proto_TEXTURE_COMPONENT_entries[] =
    {
        {{&textureData_proto_TEXTURE_COMPONENT_names[0], 4}, 0},
        {{&textureData_proto_TEXTURE_COMPONENT_names[4], 6}, 7},
        {{&textureData_proto_TEXTURE_COMPONENT_names[10], 5}, 6},
        {{&textureData_proto_TEXTURE_COMPONENT_names[15], 3}, 4},
        {{&textureData_proto_TEXTURE_COMPONENT_names[18], 5}, 2},
        {{&textureData_proto_TEXTURE_COMPONENT_names[23], 13}, 1},
        {{&textureData_proto_TEXTURE_COMPONENT_names[36], 12}, 5},
        {{&textureData_proto_TEXTURE_COMPONENT_names[48], 14}, 3},
};

static const int textureData_proto_TEXTURE_COMPONENT_entries_by_number[] = {
    0,  // 0 -> BYTE
    5,  // 1 -> UNSIGNED_BYTE
    4,  // 2 -> SHORT
    7,  // 3 -> UNSIGNED_SHORT
    3,  // 4 -> INT
    6,  // 5 -> UNSIGNED_INT
    2,  // 6 -> FLOAT
    1,  // 7 -> DOUBLE
};

const std::string& textureData_proto_TEXTURE_COMPONENT_Name(textureData_proto_TEXTURE_COMPONENT value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          textureData_proto_TEXTURE_COMPONENT_entries, textureData_proto_TEXTURE_COMPONENT_entries_by_number,
          8, textureData_proto_TEXTURE_COMPONENT_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      textureData_proto_TEXTURE_COMPONENT_entries, textureData_proto_TEXTURE_COMPONENT_entries_by_number, 8,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : textureData_proto_TEXTURE_COMPONENT_strings[idx].get();
}

bool textureData_proto_TEXTURE_COMPONENT_Parse(absl::string_view name, textureData_proto_TEXTURE_COMPONENT* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      textureData_proto_TEXTURE_COMPONENT_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<textureData_proto_TEXTURE_COMPONENT>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::BYTE;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::UNSIGNED_BYTE;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::SHORT;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::UNSIGNED_SHORT;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::INT;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::UNSIGNED_INT;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::FLOAT;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::DOUBLE;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::TEXTURE_COMPONENT_MIN;
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto::TEXTURE_COMPONENT_MAX;
constexpr int textureData_proto::TEXTURE_COMPONENT_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class textureData_proto::_Internal {
 public:
  using HasBits =
      decltype(std::declval<textureData_proto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_._has_bits_);
};

textureData_proto::textureData_proto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:textureData_proto)
}
inline PROTOBUF_NDEBUG_INLINE textureData_proto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::textureData_proto& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filenamedata_(arena, from.filenamedata_),
        podata_(arena, from.podata_),
        pversion_(arena, from.pversion_) {}

textureData_proto::textureData_proto(
    ::google::protobuf::Arena* arena,
    const textureData_proto& from)
    : ::google::protobuf::MessageLite(arena) {
  textureData_proto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, texttype_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, texttype_),
           offsetof(Impl_, as_is_) -
               offsetof(Impl_, texttype_) +
               sizeof(Impl_::as_is_));

  // @@protoc_insertion_point(copy_constructor:textureData_proto)
}
inline PROTOBUF_NDEBUG_INLINE textureData_proto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        filenamedata_(arena),
        podata_(arena),
        pversion_(arena) {}

inline void textureData_proto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, texttype_),
           0,
           offsetof(Impl_, as_is_) -
               offsetof(Impl_, texttype_) +
               sizeof(Impl_::as_is_));
}
textureData_proto::~textureData_proto() {
  // @@protoc_insertion_point(destructor:textureData_proto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void textureData_proto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.filenamedata_.Destroy();
  _impl_.podata_.Destroy();
  _impl_.pversion_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
textureData_proto::GetClassData() const {
  PROTOBUF_CONSTINIT static const ClassDataLite<18> _data_ =
      {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_._cached_size_),
              true,
          },
          "textureData_proto",
      };

  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 0, 0, 2> textureData_proto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_textureData_proto_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::textureData_proto>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .textureData_proto.TEXTURE_TYPE textType = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.texttype_)}},
    // optional .textureData_proto.TEXTURE_MAG_FILTER magFilter = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.magfilter_)}},
    // optional .textureData_proto.TEXTURE_MIN_FILTER minFilter = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.minfilter_)}},
    // optional .textureData_proto.TEXTURE_WRAP wrapS = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.wraps_)}},
    // optional .textureData_proto.TEXTURE_WRAP wrapT = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.wrapt_)}},
    // optional .textureData_proto.TEXTURE_EFORMAT eFormat = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.eformat_)}},
    // optional .textureData_proto.TEXTURE_NCOMPONENT nComponent = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 9, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.ncomponent_)}},
    // optional uint32 width = 8;
    {::_pbi::TcParser::FastV32S1,
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.width_)}},
    // optional uint32 height = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 11, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.height_)}},
    // optional uint32 component = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 12, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.component_)}},
    // optional uint32 bits = 11;
    {::_pbi::TcParser::FastV32S1,
     {88, 13, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.bits_)}},
    // optional .textureData_proto.TEXTURE_COMPONENT pixel_type = 12;
    {::_pbi::TcParser::FastV32S1,
     {96, 14, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.pixel_type_)}},
    // optional uint32 fileNameSize = 13;
    {::_pbi::TcParser::FastV32S1,
     {104, 15, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.filenamesize_)}},
    // optional bytes fileNameData = 14;
    {::_pbi::TcParser::FastBS1,
     {114, 0, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.filenamedata_)}},
    // optional uint32 dataSize = 15;
    {::_pbi::TcParser::FastV32S1,
     {120, 16, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.datasize_)}},
    // optional bytes poData = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 1, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.podata_)}},
    // optional bytes pVersion = 17;
    {::_pbi::TcParser::FastBS2,
     {394, 2, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.pversion_)}},
    // optional uint32 md5 = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 17, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.md5_)}},
    // optional bool enabled = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.enabled_)}},
    // optional bool as_is = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.as_is_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .textureData_proto.TEXTURE_TYPE textType = 1;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.texttype_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .textureData_proto.TEXTURE_MAG_FILTER magFilter = 2;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.magfilter_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .textureData_proto.TEXTURE_MIN_FILTER minFilter = 3;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.minfilter_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .textureData_proto.TEXTURE_WRAP wrapS = 4;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.wraps_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .textureData_proto.TEXTURE_WRAP wrapT = 5;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.wrapt_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .textureData_proto.TEXTURE_EFORMAT eFormat = 6;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.eformat_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .textureData_proto.TEXTURE_NCOMPONENT nComponent = 7;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.ncomponent_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional uint32 width = 8;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.width_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 height = 9;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.height_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 component = 10;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.component_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 bits = 11;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.bits_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .textureData_proto.TEXTURE_COMPONENT pixel_type = 12;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.pixel_type_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional uint32 fileNameSize = 13;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.filenamesize_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes fileNameData = 14;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.filenamedata_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 dataSize = 15;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.datasize_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes poData = 16;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.podata_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes pVersion = 17;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.pversion_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 md5 = 18;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.md5_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool enabled = 19;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.enabled_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool as_is = 20;
    {PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.as_is_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void textureData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:textureData_proto)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filenamedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.podata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pversion_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.texttype_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.wrapt_) -
        reinterpret_cast<char*>(&_impl_.texttype_)) + sizeof(_impl_.wrapt_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.eformat_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.filenamesize_) -
        reinterpret_cast<char*>(&_impl_.eformat_)) + sizeof(_impl_.filenamesize_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.datasize_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.as_is_) -
        reinterpret_cast<char*>(&_impl_.datasize_)) + sizeof(_impl_.as_is_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

::uint8_t* textureData_proto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:textureData_proto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .textureData_proto.TEXTURE_TYPE textType = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_texttype(), target);
  }

  // optional .textureData_proto.TEXTURE_MAG_FILTER magFilter = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_magfilter(), target);
  }

  // optional .textureData_proto.TEXTURE_MIN_FILTER minFilter = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_minfilter(), target);
  }

  // optional .textureData_proto.TEXTURE_WRAP wrapS = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_wraps(), target);
  }

  // optional .textureData_proto.TEXTURE_WRAP wrapT = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_wrapt(), target);
  }

  // optional .textureData_proto.TEXTURE_EFORMAT eFormat = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_eformat(), target);
  }

  // optional .textureData_proto.TEXTURE_NCOMPONENT nComponent = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_ncomponent(), target);
  }

  // optional uint32 width = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_width(), target);
  }

  // optional uint32 height = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_height(), target);
  }

  // optional uint32 component = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_component(), target);
  }

  // optional uint32 bits = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_bits(), target);
  }

  // optional .textureData_proto.TEXTURE_COMPONENT pixel_type = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        12, this->_internal_pixel_type(), target);
  }

  // optional uint32 fileNameSize = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_filenamesize(), target);
  }

  // optional bytes fileNameData = 14;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_filenamedata();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  // optional uint32 dataSize = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_datasize(), target);
  }

  // optional bytes poData = 16;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_podata();
    target = stream->WriteBytesMaybeAliased(16, _s, target);
  }

  // optional bytes pVersion = 17;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_pversion();
    target = stream->WriteBytesMaybeAliased(17, _s, target);
  }

  // optional uint32 md5 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_md5(), target);
  }

  // optional bool enabled = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_enabled(), target);
  }

  // optional bool as_is = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_as_is(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:textureData_proto)
  return target;
}

::size_t textureData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:textureData_proto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes fileNameData = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_filenamedata());
    }

    // optional bytes poData = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_podata());
    }

    // optional bytes pVersion = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_pversion());
    }

    // optional .textureData_proto.TEXTURE_TYPE textType = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_texttype());
    }

    // optional .textureData_proto.TEXTURE_MAG_FILTER magFilter = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_magfilter());
    }

    // optional .textureData_proto.TEXTURE_MIN_FILTER minFilter = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_minfilter());
    }

    // optional .textureData_proto.TEXTURE_WRAP wrapS = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_wraps());
    }

    // optional .textureData_proto.TEXTURE_WRAP wrapT = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_wrapt());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .textureData_proto.TEXTURE_EFORMAT eFormat = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_eformat());
    }

    // optional .textureData_proto.TEXTURE_NCOMPONENT nComponent = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_ncomponent());
    }

    // optional uint32 width = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_width());
    }

    // optional uint32 height = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_height());
    }

    // optional uint32 component = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_component());
    }

    // optional uint32 bits = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bits());
    }

    // optional .textureData_proto.TEXTURE_COMPONENT pixel_type = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_pixel_type());
    }

    // optional uint32 fileNameSize = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_filenamesize());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 dataSize = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_datasize());
    }

    // optional uint32 md5 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_md5());
    }

    // optional bool enabled = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3;
    }

    // optional bool as_is = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void textureData_proto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const textureData_proto*>(
      &from));
}

void textureData_proto::MergeFrom(const textureData_proto& from) {
  textureData_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:textureData_proto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filenamedata(from._internal_filenamedata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_podata(from._internal_podata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_pversion(from._internal_pversion());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.texttype_ = from._impl_.texttype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.magfilter_ = from._impl_.magfilter_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.minfilter_ = from._impl_.minfilter_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.wraps_ = from._impl_.wraps_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.wrapt_ = from._impl_.wrapt_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.eformat_ = from._impl_.eformat_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ncomponent_ = from._impl_.ncomponent_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.component_ = from._impl_.component_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bits_ = from._impl_.bits_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.pixel_type_ = from._impl_.pixel_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.filenamesize_ = from._impl_.filenamesize_;
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.datasize_ = from._impl_.datasize_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.md5_ = from._impl_.md5_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.as_is_ = from._impl_.as_is_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void textureData_proto::CopyFrom(const textureData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:textureData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void textureData_proto::InternalSwap(textureData_proto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filenamedata_, &other->_impl_.filenamedata_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.podata_, &other->_impl_.podata_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pversion_, &other->_impl_.pversion_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.as_is_)
      + sizeof(textureData_proto::_impl_.as_is_)
      - PROTOBUF_FIELD_OFFSET(textureData_proto, _impl_.texttype_)>(
          reinterpret_cast<char*>(&_impl_.texttype_),
          reinterpret_cast<char*>(&other->_impl_.texttype_));
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
