// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: boundingSphereData.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_boundingSphereData_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_boundingSphereData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_boundingSphereData_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_boundingSphereData_2eproto {
  static const ::uint32_t offsets[];
};
class boundingSphereData_proto;
struct boundingSphereData_protoDefaultTypeInternal;
extern boundingSphereData_protoDefaultTypeInternal _boundingSphereData_proto_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class boundingSphereData_proto final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:boundingSphereData_proto) */ {
 public:
  inline boundingSphereData_proto() : boundingSphereData_proto(nullptr) {}
  ~boundingSphereData_proto() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR boundingSphereData_proto(
      ::google::protobuf::internal::ConstantInitialized);

  inline boundingSphereData_proto(const boundingSphereData_proto& from) : boundingSphereData_proto(nullptr, from) {}
  inline boundingSphereData_proto(boundingSphereData_proto&& from) noexcept
      : boundingSphereData_proto(nullptr, std::move(from)) {}
  inline boundingSphereData_proto& operator=(const boundingSphereData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline boundingSphereData_proto& operator=(boundingSphereData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const boundingSphereData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const boundingSphereData_proto* internal_default_instance() {
    return reinterpret_cast<const boundingSphereData_proto*>(
        &_boundingSphereData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(boundingSphereData_proto& a, boundingSphereData_proto& b) { a.Swap(&b); }
  inline void Swap(boundingSphereData_proto* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(boundingSphereData_proto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  boundingSphereData_proto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<boundingSphereData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const boundingSphereData_proto& from);
  void MergeFrom(const boundingSphereData_proto& from);
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(boundingSphereData_proto* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "boundingSphereData_proto"; }

 protected:
  explicit boundingSphereData_proto(::google::protobuf::Arena* arena);
  boundingSphereData_proto(::google::protobuf::Arena* arena, const boundingSphereData_proto& from);
  boundingSphereData_proto(::google::protobuf::Arena* arena, boundingSphereData_proto&& from) noexcept
      : boundingSphereData_proto(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData() const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCntrFieldNumber = 1,
    kRadFieldNumber = 2,
  };
  // repeated float cntr = 1;
  int cntr_size() const;
  private:
  int _internal_cntr_size() const;

  public:
  void clear_cntr() ;
  float cntr(int index) const;
  void set_cntr(int index, float value);
  void add_cntr(float value);
  const ::google::protobuf::RepeatedField<float>& cntr() const;
  ::google::protobuf::RepeatedField<float>* mutable_cntr();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_cntr() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_cntr();

  public:
  // optional float rad = 2;
  bool has_rad() const;
  void clear_rad() ;
  float rad() const;
  void set_rad(float value);

  private:
  float _internal_rad() const;
  void _internal_set_rad(float value);

  public:
  // @@protoc_insertion_point(class_scope:boundingSphereData_proto)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_boundingSphereData_proto_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const boundingSphereData_proto& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> cntr_;
    float rad_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_boundingSphereData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// boundingSphereData_proto

// repeated float cntr = 1;
inline int boundingSphereData_proto::_internal_cntr_size() const {
  return _internal_cntr().size();
}
inline int boundingSphereData_proto::cntr_size() const {
  return _internal_cntr_size();
}
inline void boundingSphereData_proto::clear_cntr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cntr_.Clear();
}
inline float boundingSphereData_proto::cntr(int index) const {
  // @@protoc_insertion_point(field_get:boundingSphereData_proto.cntr)
  return _internal_cntr().Get(index);
}
inline void boundingSphereData_proto::set_cntr(int index, float value) {
  _internal_mutable_cntr()->Set(index, value);
  // @@protoc_insertion_point(field_set:boundingSphereData_proto.cntr)
}
inline void boundingSphereData_proto::add_cntr(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cntr()->Add(value);
  // @@protoc_insertion_point(field_add:boundingSphereData_proto.cntr)
}
inline const ::google::protobuf::RepeatedField<float>& boundingSphereData_proto::cntr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:boundingSphereData_proto.cntr)
  return _internal_cntr();
}
inline ::google::protobuf::RepeatedField<float>* boundingSphereData_proto::mutable_cntr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:boundingSphereData_proto.cntr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cntr();
}
inline const ::google::protobuf::RepeatedField<float>&
boundingSphereData_proto::_internal_cntr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cntr_;
}
inline ::google::protobuf::RepeatedField<float>* boundingSphereData_proto::_internal_mutable_cntr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cntr_;
}

// optional float rad = 2;
inline bool boundingSphereData_proto::has_rad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void boundingSphereData_proto::clear_rad() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rad_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float boundingSphereData_proto::rad() const {
  // @@protoc_insertion_point(field_get:boundingSphereData_proto.rad)
  return _internal_rad();
}
inline void boundingSphereData_proto::set_rad(float value) {
  _internal_set_rad(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:boundingSphereData_proto.rad)
}
inline float boundingSphereData_proto::_internal_rad() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rad_;
}
inline void boundingSphereData_proto::_internal_set_rad(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rad_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_boundingSphereData_2eproto_2epb_2eh
